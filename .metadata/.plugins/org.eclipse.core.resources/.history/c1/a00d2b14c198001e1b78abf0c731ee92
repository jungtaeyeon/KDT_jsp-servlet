package com.example.demo.pojo2;

import java.io.IOException;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.log4j.Logger;

/*
 * upmu[] - 내려갈 때 -> ActionServlet -> BoardController로 연결될 때
 * -> 개선점(pojo3) -> spring -> XXXXHandlerMapping -> BoardController 에서부터 메소드를 쪼갤수는 없나?? 
 * -> 현재는 if문으로 되어있어서 가독성 및 재사용성이 떨어짐
 * pageMove[] - 올라올 때
 */

// 스프링으로 넘어가면 @Controller -> 스프링에서는 클래스 사이의 결합도를 낮추기 위해 상속(implements)을 포기
// @RequestMapping(/notice/*) - 2번 URL매핑
public class BoardController implements Controller {
	Logger logger = Logger.getLogger(BoardController.class);
	BoardLogic nLogic = new BoardLogic();//이른

	@Override
	public String execute(HttpServletRequest req, HttpServletResponse res) throws ServletException, IOException {
		// 현재 doService로 묶어놨기 떄문에 메소드를 나누는게 큰 의미는 없지만
		// Restful 상징성을 위해 나눠본다.
		
		// 전체조회일 때 - select - n건 - List<Map or VO> - list.jsp
		// 상세조회와 응답페이지 이름이 달라서 메소드를 분리 한다. - list.jsp
		// 배포위치가 WEB-INF일 때 -> /WEB-INF/jsp/(workname)xxx.jsp 이런 구조
		// 배포위치가 webapp일 때
		
		// 상세조회일 때 - select - 1건 Map or VO - read.jsp
		// 전체조회와 응답페이지 이름이 달라서 메소드를 분리 한다. - read.jsp
		
		// 등록일 때 - post 방식
		
		// 수정일 때 - get,put 방식
		
		// 삭제일 때 - delete 방식
		
		return "redirect:/notice/noticeList.jsp"; // webapp을 바라본다.
//		return "forward:/notice/noticeList.jsp"; // webapp - 요청이 유지되는것 으로 판단해서 서블릿이 쥐고있는 값을 jsp에서도 사용할 수 있다.
//		return "/notice/noticeList.jsp"; // WEB-INF/jsp/notice아래
	}

}

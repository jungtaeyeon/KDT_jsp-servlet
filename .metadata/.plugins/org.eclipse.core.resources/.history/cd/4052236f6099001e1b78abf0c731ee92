package com.example.demo.pojo2;

import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.ServletException;
import javax.servlet.ServletOutputStream;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.log4j.Logger;

import com.google.gson.Gson;
import com.oreilly.servlet.MultipartRequest;
import com.oreilly.servlet.multipart.DefaultFileRenamePolicy;
import com.util.HashMapBinder;

/*
 * upmu[] - 내려갈 때 -> ActionServlet -> BoardController로 연결될 때
 * -> 개선점(pojo3) -> spring -> XXXXHandlerMapping -> BoardController 에서부터 메소드를 쪼갤수는 없나?? 
 * -> 현재는 if문으로 되어있어서 가독성 및 재사용성이 떨어짐
 * pageMove[] - 올라올 때
 * 
 * XXXLogic 메소드를 호출할 때 BoardLogic클래스의 인스턴스화가 선행됨 (DI지원)
 * 여기는 POJO이므로 제어권을 개발자인 내가 가지므로 이른 인스턴스화 부분은 생략함
 * 객체에 대한 라이프사이클 관리 책임이 개발자인 내게 있다.
 * 
 * 아쉬운 점은 BoardController에서 메소드로 분할이 안되었다는 점이다.
 * 대신 if문으로 처리하였다. - 별로다
 * Reflection API 깊은 고민 - ApplicationContext, BeanFactory 같은 스프링 컨테이너
 */

// 스프링으로 넘어가면 @Controller -> 스프링에서는 클래스 사이의 결합도를 낮추기 위해 상속(implements)을 포기
// @RequestMapping(/notice/*) - 2번 URL매핑
public class BoardController implements Controller {
	Logger logger = Logger.getLogger(BoardController.class);
	BoardLogic bLogic = new BoardLogic(); //이른

	@Override
	public String execute(HttpServletRequest req, HttpServletResponse res) throws ServletException, IOException {
		String upmu[] = (String[])req.getAttribute("upmu");
		String path = null;
		Map<String, Object> pMap = new HashMap<>();
		HashMapBinder hmb = new HashMapBinder(req);
		// 현재 doService로 묶어놨기 떄문에 메소드를 나누는게 큰 의미는 없지만
		// Restful 상징성을 위해 나눠본다.
		
		// 전체조회일 때 - select - n건 - List<Map or VO> - list.jsp
		// 상세조회와 응답페이지 이름이 달라서 메소드를 분리 한다. - list.jsp
		// 배포위치가 WEB-INF일 때 -> /WEB-INF/jsp/(workname)메소드이름 or upmu[1].jsp 이런 구조 workname -> 컨트롤러의 이름을 결정지음
		// 배포위치가 webapp일 때	
		if("boardList".equals(upmu[1])) {// select
			logger.info("boardList");
			List<Map<String, Object>> bList = null;// nList.size()가 n개
			//NoticeLogic의 메소드 호출 - 객체주입 - 내가(책임) 아님 스프링(제어역전)
			hmb.bind(pMap);
			bList = bLogic.boardList(pMap);
			//원본에다가 담아 두자
			req.setAttribute("bList", bList);
			path = "forward:/board/boardList.jsp";
		} ////// end of 목록조회
		
		// 상세조회일 때 - select - 1건 Map or VO - read.jsp
		// 전체조회와 응답페이지 이름이 달라서 메소드를 분리 한다. - read.jsp
		else if("boardDetail".equals(upmu[1])) {
			logger.info("boardDetail");
			List<Map<String ,Object>> bList = null;//nList.size()=1
			// BoardLogic의 메소드 호출 - 객체주입 - 내가(책임) 아님 스프링(제어역전)
			//select * from notice where n_no=5;
			hmb.bind(pMap);
			bList = bLogic.boardList(pMap);
			//원본에다가 담아 두자
			req.setAttribute("bList", bList);
			path.append("boardDetail.jsp");
			isRedirect = false;//false이면 forward처리됨
			}
		// 아래 공통분모 - 반환값이 int이다, commit과 rollback대상이다. -> 후처리
		// 입력 | 수정 | 삭제 인 경우 모두 1 이라면 어느페이지로 이동 할까요? 
		// -> 목록(select - /board/boardList.gd2 -> forward처리 해야함)을 보여줘
		
		// 등록일 때 - post 방식 - insert: 1(성공) or 0(실패)
		else if("boardInsert".equals(upmu[1])) {
			logger.info("boardInsert");
			int result = 0;
			hmb.bind(pMap);
			result = bLogic.boardInsert(pMap);
			if(result == 1) {
				path.append("boardList.gd");
				isRedirect = true;//sendRedirect
				}else {
					path.append("boardError.jsp");
					isRedirect = true;
					}
			} ///////////////// end of Insert
		
		// 수정일 때 - get,put 방식 - update: 1(성공) or 0(실패)
		else if("boardUpdate".equals(upmu[1])) {//update
			logger.info("boardUpdate");
			int result = 0;
			hmb.bind(pMap);
			result = bLogic.boardUpdate(pMap);
			if(result == 1) {
				path.append("boardList.gd");
				isRedirect = true;
				}else {
					path.append("boardError.jsp");
					isRedirect = true;
					}
			} ///////////////// end of Update
		
		// 삭제일 때 - delete 방식 - delete: 1(성공) or 0(실패)
		else if("boardDelete".equals(upmu[1])) {//delete
			logger.info("boardDelete");
			int result = 0;
			hmb.bind(pMap);
			result = bLogic.boardDelete(pMap);
			if(result == 1) {
				path.append("boardList.gd");
				isRedirect = true;
				}else {
					path.append("boardError.jsp");
					isRedirect = true;
					}
			} ///////////////// end of Delete
		
		return path;
//		return "redirect:/notice/noticeList.jsp"; // webapp을 바라본다.
//		return "forward:/notice/noticeList.jsp"; // webapp - 요청이 유지되는것 으로 판단해서 서블릿이 쥐고있는 값을 jsp에서도 사용할 수 있다.
//		return "/notice/noticeList.jsp"; // WEB-INF/jsp/notice아래
	} //////// end of execute
}///////////// end of BoardController

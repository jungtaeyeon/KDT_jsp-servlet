package com.example.demo.pojo2;

import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.ServletException;
import javax.servlet.ServletOutputStream;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.log4j.Logger;

import com.google.gson.Gson;
import com.oreilly.servlet.MultipartRequest;
import com.oreilly.servlet.multipart.DefaultFileRenamePolicy;
import com.util.HashMapBinder;

/*
 * upmu[] - 내려갈 때 -> ActionServlet -> BoardController로 연결될 때
 * -> 개선점(pojo3) -> spring -> XXXXHandlerMapping -> BoardController 에서부터 메소드를 쪼갤수는 없나?? 
 * -> 현재는 if문으로 되어있어서 가독성 및 재사용성이 떨어짐
 * pageMove[] - 올라올 때
 * 
 * XXXLogic 메소드를 호출할 때 BoardLogic클래스의 인스턴스화가 선행됨 (DI지원)
 * 여기는 POJO이므로 제어권을 개발자인 내가 가지므로 이른 인스턴스화 부분은 생략함
 * 객체에 대한 라이프사이클 관리 책임이 개발자인 내게 있다.
 * 
 * 아쉬운 점은 BoardController에서 메소드로 분할이 안되었다는 점이다.
 * 대신 if문으로 처리하였다. - 별로다
 * Reflection API 깊은 고민 - ApplicationContext, BeanFactory 같은 스프링 컨테이너
 */

// 스프링으로 넘어가면 @Controller -> 스프링에서는 클래스 사이의 결합도를 낮추기 위해 상속(implements)을 포기
// @RequestMapping(/notice/*) - 2번 URL매핑
public class BoardController implements Controller {
	Logger logger = Logger.getLogger(BoardController.class);
	BoardLogic bLogic = new BoardLogic(); //이른

	@Override
	public String execute(HttpServletRequest req, HttpServletResponse res) throws ServletException, IOException {
		String upmu[] = (String[])req.getAttribute("upmu");
		String path = null;
		// 현재 doService로 묶어놨기 떄문에 메소드를 나누는게 큰 의미는 없지만
		// Restful 상징성을 위해 나눠본다.
		
		// 전체조회일 때 - select - n건 - List<Map or VO> - list.jsp
		// 상세조회와 응답페이지 이름이 달라서 메소드를 분리 한다. - list.jsp
		// 배포위치가 WEB-INF일 때 -> /WEB-INF/jsp/(workname)메소드이름 or upmu[1].jsp 이런 구조 workname -> 컨트롤러의 이름을 결정지음
		// 배포위치가 webapp일 때	
////////////////////////////////////<< 사용자로 부터 입력받은 값 처리 >>//////////////////////////////////
		if("boardList".equals(upmu[1])) {// select
			logger.info("boardList");
			List<Map<String, Object>> bList = null;// nList.size()가 n개
			//NoticeLogic의 메소드 호출 - 객체주입 - 내가(책임) 아님 스프링(제어역전)
			hmb.bind(pMap);
			bList = bLogic.boardList(pMap);
			//원본에다가 담아 두자
			req.setAttribute("bList", bList);
			path.append("boardList.jsp");
			isRedirect = false;// false이면 forward처리됨
		}
		// 상세조회일 때 - select - 1건 Map or VO - read.jsp
		// 전체조회와 응답페이지 이름이 달라서 메소드를 분리 한다. - read.jsp
		else if("boardDetail".equals(upmu[1])) {
			logger.info("boardDetail");
			List<Map<String ,Object>> bList = null;//nList.size()=1
			// BoardLogic의 메소드 호출 - 객체주입 - 내가(책임) 아님 스프링(제어역전)
			//select * from notice where n_no=5;
			hmb.bind(pMap);
			bList = bLogic.boardList(pMap);
			//원본에다가 담아 두자
			req.setAttribute("bList", bList);
			path.append("boardDetail.jsp");
			isRedirect = false;//false이면 forward처리됨
			}
		// 아래 공통분모 - 반환값이 int이다, commit과 rollback대상이다. -> 후처리
		// 입력 | 수정 | 삭제 인 경우 모두 1 이라면 어느페이지로 이동 할까요? 
		// -> 목록(select - /board/boardList.gd2 -> forward처리 해야함)을 보여줘
		
		// 등록일 때 - post 방식 - insert: 1(성공) or 0(실패)
		else if("boardInsert".equals(upmu[1])) {
			logger.info("boardInsert");
			int result = 0;
			hmb.bind(pMap);
			result = bLogic.boardInsert(pMap);
			if(result == 1) {
				path.append("boardList.gd");
				isRedirect = true;//sendRedirect
				}else {
					path.append("boardError.jsp");
					isRedirect = true;
					}
			}///////////////// end of Insert
		
		// 수정일 때 - get,put 방식 - update: 1(성공) or 0(실패)
		else if(true) {
			path = "redirect:4";
		}
		
		// 삭제일 때 - delete 방식 - delete: 1(성공) or 0(실패)
		else if(true) {
			path = "redirect:5";
		}
		

		return path;
		
//		return "redirect:/notice/noticeList.jsp"; // webapp을 바라본다.
//		return "forward:/notice/noticeList.jsp"; // webapp - 요청이 유지되는것 으로 판단해서 서블릿이 쥐고있는 값을 jsp에서도 사용할 수 있다.
//		return "/notice/noticeList.jsp"; // WEB-INF/jsp/notice아래
	}
}


////////////////////<< 사용자로 부터 입력받은 값 처리 >>///////////////////
// ==>  스프링에서는 이런 공통된 관심사에 대해서도  지원하고 있다
// 스프링에서는 HashMapBinder와 같은 클래스를 따로 구현하지 않아도 된다. - 지원되니깐
Map<String, Object> pMap = new HashMap<>();
HashMapBinder hmb = new HashMapBinder(req);



else if("procNoticeList".equals(upmu[1])) {//select
logger.info("procNoticeList");
List<Map<String ,Object>> nList = null;//nList.size()가 n개 
// NoticeLogic의 메소드 호출 - 객체주입 - 내가(책임) 아님 스프링(제어역전)
hmb.bind(pMap);  
nList = nLogic.procNoticeList(pMap);
//원본에다가 담아 두자
req.setAttribute("nList", nList);
path.append("noticeList.jsp");
isRedirect = false;//false이면 forward처리됨
}		



//화면 출력을 ReactJS와 같이 다른 언어 다른 라이브러리를 사용하여 처리해야 할땐
//Back-End에서 해야될 일은 JSON포맷으로 응답이 나가도록 처리해주면 된다.
//POJO 1-3버전에서는 이 부분도 공통코드로 담아 본다
else if("jsonNoticeList2".equals(upmu[1])) {//select
logger.info("jsonNoticeList");
List<Map<String ,Object>> nList = null;
hmb.bind(pMap);
nList = nLogic.noticeList(pMap);
Gson g = new Gson();
String temp = g.toJson(nList);
res.setCharacterEncoding("utf-8");
res.setContentType("application/json");
PrintWriter out = res.getWriter();
//out.print(nList);//List-> [], Map -> {deptno=10, dname=영업부}
out.print(temp);//[{"deptno":10, "dname":"영업무"}]
//응답결과가 페이지가 아닌 경우가 존재한다 
//예를들면) json이거나 quill사용시 이미지 이름 일때도 포함된다.
//path의 값을 null처리하거나 문자열이 나가는 경우를 고려해야 한다
int end = path.toString().length();// -> notice/
path.delete(0, end);
path.append(temp);//url이 전달되는게 아니라 json형식 즉 문자열이 전달됨

}		
else if("jsonNoticeList".equals(upmu[1])) {//select
logger.info("jsonNoticeList");
List<Map<String ,Object>> nList = null;
hmb.bind(pMap);
nList = nLogic.noticeList(pMap);
//원본에다가 담아 두자
req.setAttribute("nList", nList);
//실제 플젝에서는 이렇게 하지 않는다(서블릿단에서 직접 내보낸다) 1-2버전에서는 개선해 본다
path.append("jsonNoticeList.jsp");//jsp를 통해서 나가는 구조이다. 
isRedirect = false;//false이면 forward처리됨
}		
//jsp - 입력 - action(insert) - 1 - 성공 - action(select) - jsp




}else if("noticeUpdate".equals(upmu[1])) {//update
logger.info("noticeUpdate");
int result = 0;
hmb.bind(pMap);
result = nLogic.noticeUpdate(pMap);
if(result == 1) {
path.append("noticeList.gd");
isRedirect = true;
}else {
path.append("noticeError.jsp");
isRedirect = true;
}

}else if("noticeDelete".equals(upmu[1])) {//delete
logger.info("noticeDelete");
int result = 0;
hmb.bind(pMap);
result = nLogic.noticeDelete(pMap);
if(result == 1) {
path.append("noticeList.gd");
isRedirect = true;
}else {
path.append("noticeError.jsp");
isRedirect = true;
}	
}else if("imageUpload".equals(upmu[1])) {//delete
//quill editor에서 이미지를 선택하면 해당 요청을 호출함 - 비동기처리
//post이면서 enctype 바이너리인 경우 전송이 안됨
MultipartRequest multi  = null;
String realFolder = "//Users//jeongtaeyeon//workspace_jsp2//nae2Gym//src//main//webapp//pds";
String encType = "utf-8";
int maxSize = 5*1024*1024;
try {
multi = new MultipartRequest(req, realFolder, maxSize,  encType, new DefaultFileRenamePolicy());
} catch (Exception e) {
logger.info(e.toString());
}
Map<String, Object> rmap = nLogic.imageUpload(multi, realFolder);
logger.info(rmap.get("bs_file"));			String temp = null;
if(rmap !=null) {
temp = rmap.get("bs_file").toString();
}
int end = path.toString().length();// -> notice/
path.delete(0, end);
path.append(temp);//url이 전달되는게 아니라 json형식 즉 문자열이 전달됨
}// end of imageUpload
//http://localhost:8000/notice/imageGet.gd?imageName=avatar25.png
else if("imageGet".equals(upmu[1])) {//첨부파일을 처리할 때 다운로드 처리하는 화면에서 사용할 코드 소개함
String b_file = req.getParameter("imageName");// avartar.png
logger.info("111 => " +b_file);
String filePath = "//Users//jeongtaeyeon//workspace_jsp2//nae2Gym//src//main//webapp//pds";
File file = new File(filePath, b_file.trim());
logger.info("222 => " + file );
String mimeType = req.getServletContext().getMimeType(file.toString());
if(mimeType == null) {
res.setContentType("application/octet-stream");
}
String downName = null;
FileInputStream fis = null;
ServletOutputStream sos = null;
try {
if(req.getHeader("user-agent").indexOf("MSIE")==-1) {
downName = new String(b_file.getBytes("UTF-8"), "8859_1");//국제 표준규격- 다국어지원
}else {
downName = new String(b_file.getBytes("EUC-KR"), "8859_1");	//한국 표준 규격				
}
res.setHeader("Content-Disposition", "attachment;filename="+downName);
logger.info("333");
fis = new FileInputStream(file);
logger.info(fis);
sos = res.getOutputStream();
byte b[] = new byte[1024*10];
int data = 0;
logger.info("444");
while((data=(fis.read(b,0, b.length)))!=-1) {
sos.write(b,0,data);
}
sos.flush();//FileInputStream을 사용해서 file객체를 읽음- 메모리에 쌓인 정보를 비우는 메소드 호출 
isRedirect = true;//null처리를 해둠
logger.info(path);
int end = path.toString().length();// -> notice/
path.delete(0, end);
path = null;
} catch (Exception e) {
logger.info(e.toString());
} finally {
try {
if(sos !=null) sos.close();
if(fis !=null) fis.close();
} catch (Exception e2) {
// TODO: handle exception
}
}
}// end of imageGet


/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.55
 * Generated at: 2023-12-11 08:40:19 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.quill;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class quillTest_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(1);
    _jspx_dependants.put("/common/quill_common.jsp", Long.valueOf(1702260698000L));
  }

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>Insert title here</title>\r\n");
      out.write("\r\n");
      out.write("<link href=\"https://cdn.quilljs.com/1.3.6/quill.snow.css\" rel=\"stylesheet\">\r\n");
      out.write("<script src=\"https://cdn.quilljs.com/1.3.6/quill.js\"></script>\r\n");
      out.write("<script src=\"https://ajax.googleapis.com/ajax/libs/jquery/3.6.0/jquery.min.js\"></script>");
      out.write("\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("	<!-- Create the editor container -->\r\n");
      out.write("	<div id=\"editor22\"></div>\r\n");
      out.write("	<!-- Initialize Quill editor \r\n");
      out.write("	브라우저가 DOM Tree그린다\r\n");
      out.write("	CSS 포함하는 DOM Tree 그린다\r\n");
      out.write("	출력됨\r\n");
      out.write("	-->\r\n");
      out.write("	<script>\r\n");
      out.write("	const toolbarOptions = [\r\n");
      out.write("		  ['bold', 'italic', 'underline'],        // toggled buttons\r\n");
      out.write("		  ['blockquote', 'code-block'],\r\n");
      out.write("		  [{ 'list': 'ordered'}, { 'list': 'bullet' }],\r\n");
      out.write("		  [{ 'indent': '-1'}, { 'indent': '+1' }],          // outdent/indent\r\n");
      out.write("		  [{ 'header': [1, 2, 3, 4, 5, 6, false] }],\r\n");
      out.write("		  [{ 'color': [] }, { 'background': [] }],          // dropdown with defaults from theme\r\n");
      out.write("		  [{ 'font': [] }],\r\n");
      out.write("		  [{ 'align': [] }],\r\n");
      out.write("		  ['link', 'image']\r\n");
      out.write("		];				\r\n");
      out.write("	  const quill = new Quill('#editor22', {\r\n");
      out.write("		  modules: { toolbar: toolbarOptions },				    \r\n");
      out.write("		  theme: 'snow',\r\n");
      out.write("		  placeholder: '글 작성하기',\r\n");
      out.write("	  });\r\n");
      out.write("	  const  selectLocalImage = (event) =>  {\r\n");
      out.write("		  console.log('selectLocalImage');\r\n");
      out.write("		  //e.preventDefault();이벤트 버블링 방어 코드 작성 - submit이슈, <button type=submit|button>\r\n");
      out.write("		  //quill에디터에서 이미지를 클릭했을 때 실제 화면에서는 <input type=file>생성해 주자\r\n");
      out.write("		  //이미지를 선택하면 선택하자마자 백엔드에 요청을 post방식으로 넘긴다 - 8000번 서버의 pds폴더에 선택한 이미지를 업로드 처리함\r\n");
      out.write("		  //파일을 (바이너리코드) 전송할땐 무조건 post방식으로 해야 함\r\n");
      out.write("		    const fileInput = document.createElement('input');//<input> - DOM API의 createElement를 사용하여 태그 생성하는 코드\r\n");
      out.write("		    fileInput.setAttribute('type', 'file');//<input type=file>\r\n");
      out.write("		    console.log(\"input.type \" + fileInput.type);\r\n");
      out.write("		    //이미지 파일만 선택가능하도록 제한\r\n");
      out.write("		   	fileInput.setAttribute(\"accept\", \"image/*\");//* -> image/png , image/gif, image/jpg\r\n");
      out.write("		    fileInput.setAttribute(\"name\", \"image\");//req.getParameter(\"image\"); -> <input name=\"image\"/>\r\n");
      out.write("		    fileInput.click();\r\n");
      out.write("\r\n");
      out.write("		    fileInput.addEventListener(\"change\", function () {  // change 이벤트로 input 값이 바뀌면 실행\r\n");
      out.write("		        const formData = new FormData();\r\n");
      out.write("		        const file = fileInput.files[0];\r\n");
      out.write("		        formData.append('image', file);\r\n");
      out.write("\r\n");
      out.write("		        $.ajax({//<form method=post enctype=multipart/form-data/> 이럴경우 req.getParameter사용이 불가함 -> cos.jar\r\n");
      out.write("		            type: 'post',\r\n");
      out.write("		            enctype: 'multipart/form-data',\r\n");
      out.write("		            url: '/notice/imageUpload.gd',\r\n");
      out.write("		            data: formData,\r\n");
      out.write("		            processData: false,\r\n");
      out.write("		            contentType: false,\r\n");
      out.write("		            success: function (response) {\r\n");
      out.write("						console.log('avatar.png'+response);//avartar.png\r\n");
      out.write("						const url = \"http://localhost:8000/notice/imageGet.gd?imageName=\"+response;//\r\n");
      out.write("						const range = quill.getSelection().index;\r\n");
      out.write("						quill.setSelection(range, 1);\r\n");
      out.write("						quill.clipboard.dangerouslyPasteHTML(range,'<img src='+url+' style=\"width:100%;height:auto;\" alt=\"image\"/>');\r\n");
      out.write("		            },\r\n");
      out.write("		            error: function (err) {\r\n");
      out.write("		                console.log(err);\r\n");
      out.write("		            }\r\n");
      out.write("		        });//////////////////// end of ajax\r\n");
      out.write("\r\n");
      out.write("		    });////////////////////// end of onchange 이벤트 핸들러\r\n");
      out.write("		}////////////////////////// end of selectLocalImage	  \r\n");
      out.write("		//html 가져오기\r\n");
      out.write("		const html = quill.root.innerHTML;\r\n");
      out.write("		console.log(html);\r\n");
      out.write("		quill.on('text-change', (delta, oldDelta, source) => {\r\n");
      out.write("			  console.log('글자가 입력될때 마다 호출');\r\n");
      out.write("			  console.log(quill.root.innerHTML);\r\n");
      out.write("			  //console.log(source);//user\r\n");
      out.write("			  //console.log(delta);\r\n");
      out.write("			  //console.log(oldDelta);\r\n");
      out.write("		}); ////////////// end of onchage - 텍스트 내용이 변경되었을 때 발동\r\n");
      out.write("		quill.getModule('toolbar').addHandler('image',  () => {\r\n");
      out.write("			console.log('image가 변경되었을때');\r\n");
      out.write("			selectLocalImage();\r\n");
      out.write("		})\r\n");
      out.write("	</script>\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
